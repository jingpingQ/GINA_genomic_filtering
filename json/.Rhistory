panel_data$chromosome_name !="HG1032_PATCH"
panel_data$chr !="HG1032_PATCH"
panel_data <- panel_data[panel_data$chr !="HG1032_PATCH",]
panel_region <- GRanges(seqnames = panel_data$chr,
ranges = IRanges(start = panel_data$start, end = panel_data$end, names = panel_data$gene))
seqlevelsStyle(panel_region) <- "UCSC"
vcf_subset <- readVcf(tbx, "hg19", param = panel_region)
vcf_subset
variants_pass_2 <- rowRanges(vcf_subset)[rowRanges(vcf_subset)$FILTER == "PASS", ]
vcf_subset_expanded <- expand(variants_pass_2)
mafdb <- MafDb.TOPMed.freeze5.hg19
vcf_subset_expanded
panel_gscores <- gscores(mafdb, vcf_subset_expanded)
snp_pos_maf_noNA <- panel_gscores[!is.na(panel_gscores$AF), ]
snp_pos_maf_filtered = snp_pos_maf_noNA[snp_pos_maf_noNA$AF < 0.01]
snp_pos_maf_filtered
snp_pos_maf_noNA
panel_gscores
is.na(is.na(panel_gscores$AF))
table(is.na(panel_gscores$AF))
vcf_subset_expanded
pgpc_gz = paste(pgpc, ".gz", sep="")
panel_data <- read.table("panel.bed", sep = "\t", col.names = c("chr","gene", "start", "end"))
panel_data <- panel_data[panel_data$chr !="HG1032_PATCH",]
panel_region <- GRanges(seqnames = panel_data$chr,
ranges = IRanges(start = panel_data$start, end = panel_data$end, names = panel_data$gene))
seqlevelsStyle(panel_region) <- "UCSC"
bgzip(pgpc, pgpc_gz, overwrite = T)
indexTabix(pgpc_gz, format = "vcf")
tbx <- TabixFile(pgpc_gz)
vcf_subset <- readVcf(tbx, "hg19", param = panel_region)
variants_pass_2 <- rowRanges(vcf_subset)[rowRanges(vcf_subset)$FILTER == "PASS", ]
vcf_subset_expanded <- expand(variants_pass_2)
panel_gscores
vcf_subset
variants.panel <- rowRanges(expand(vcf_subset))
variants.panel
vcf_subset_expanded
new_g <- gscores(mafdb, variants.panel)
new_g
new_na.omit <- new_g[!is.na(new_g$AF), ]
snp_filtered <- new_na.omit[new_na.omit$AF < 0.01]
snp_filtered
variants.panel
variants.panel.pass<- variants.panel[variants.panel$FILTER == "PASS", ]
variants.panel.pass
##rewrite use new object ---jingping---TA
new_g <- gscores(mafdb, variants.panel.pass)
write.table(snp_pos_maf_filtered, file = "variants_rare.tsv", sep = "\t", quote = F, row.names = F)
new_g
is.na(new_g$AF)
table(is.na(new_g$AF))
variants.panel.pass
table(is.na(new_g$AF))
vcf_subset
rowRanges(expand(vcf_subset))
######add line by Jingping --TA
variants.panel <- rowRanges(expand(vcf_subset))
variants.panel[variants.panel$FILTER == "PASS", ]
####
write.table(variants.panel.pass, file = "variants.tsv", sep = "\t", quote = F, row.names = F)
####
write.table(variant, file = "variants.tsv", sep = "\t", quote = F, row.names = F)
####
write.table(variants.panel.pass, file = "variants.tsv", sep = "\t", quote = F, row.names = F)
View(panel_data)
panel_data <- read.table("panel.bed", sep = "\t", col.names = c("chr","gene", "start", "end"))
####add line by jingping---TA
panel_data <- panel_data[panel_data$chr !="HG1032_PATCH",]
View(panel_data)
panel_region <- GRanges(seqnames = panel_data$chr,
ranges = IRanges(start = panel_data$start, end = panel_data$end, names = panel_data$gene))
seqlevelsStyle(panel_region) <- "UCSC"
bgzip(pgpc, pgpc_gz, overwrite = T)
indexTabix(pgpc_gz, format = "vcf")
tbx <- TabixFile(pgpc_gz)
vcf_subset <- readVcf(tbx, "hg19", param = panel_region)
rowRanges(expand(vcf_subset))
######add line by Jingping --TA
variants.panel <- rowRanges(expand(vcf_subset))
variants.panel[variants.panel$FILTER == "PASS", ]
variants.panel.pass<- variants.panel[variants.panel$FILTER == "PASS", ]
####
write.table(variants.panel.pass, file = "variants.tsv", sep = "\t", quote = F, row.names = F)
new_g <- gscores(mafdb, variants.panel.pass)
new_g
table(is.na(new_g$AF))
new_na.omit <- new_g[!is.na(new_g$AF), ]
snp_filtered <- new_na.omit[new_na.omit$AF < 0.01]
snp_filtered
new_na.omit
sessionInfo()
maf
mafdb
rowRanges(expand(new_g))
expand(new_g)
test_na <- expand(new_g)
test_na  <- test_na[!is.na(test_na$AF)]
test_na <- test_na[test_na$AF<0.01]
test_na
test_na <- expand(new_g)
test_na  <- test_na[!is.na(test_na$AF),]
test_na <- test_na[test_na$AF<0.01,]
test_na
snp_filtered
new_na.omit[new_na.omit$AF < 0.01,]
new_g
new_g$AF
table(new_g$AF)
new_g$AF <0.01
NEW_G
new_g
is.na(new_g$AF)
table(is.na(new_g$AF))
new_na.omit <- new_g[!is.na(new_g$AF), ]
snp_filtered <- new_na.omit[new_na.omit$AF < 0.01]
snp_filtered
##rewrite use new object ---jingping---TA
new_g <- gscores(mafdb, variants.panel.pass,pop=populations(mafdb))
new_g
new_na.omit <- new_g[!is.na(new_g$AF), ]
snp_filtered <- new_na.omit[new_na.omit$AF < 0.01]
snp_filtered
library(biomaRt)
library(VariantAnnotation)
library(MafDb.TOPMed.freeze5.hg19)
library(SNPlocs.Hsapiens.dbSNP144.GRCh37)
filename = "Congenital muscular dystrophy.tsv"
gene_ids = read.delim2(filename, header = T, sep = "\t")
# Obtain and store the appropriate dataset (hsapiens_gene_ensembl) from the ENSEMBL_MART_ENSEMBL mart
database <- useMart(biomart = "ENSEMBL_MART_ENSEMBL", host = "https://grch37.ensembl.org")
# Obtain and store the appropriate dataset (hsapiens_gene_ensembl) from the ENSEMBL_MART_ENSEMBL mart
database <- useMart(biomart = "ENSEMBL_MART_ENSEMBL", host = "https://grch37.ensembl.org")
mart_37 <- useDataset(database, dataset = "hsapiens_gene_ensembl")
data=data.frame(
individual=paste( "Mister ", seq(1,60), sep=""),
group=c( rep('A', 10), rep('B', 30), rep('C', 14), rep('D', 6)) ,
value1=sample( seq(10,100), 60, replace=T),
value2=sample( seq(10,100), 60, replace=T),
value3=sample( seq(10,100), 60, replace=T)
)
# Transform data in a tidy format (long format)
data = data %>% gather(key = "observation", value="value", -c(1,2))
# Set a number of 'empty bar' to add at the end of each group
empty_bar=2
nObsType=nlevels(as.factor(data$observation))
to_add = data.frame( matrix(NA, empty_bar*nlevels(data$group)*nObsType, ncol(data)) )
colnames(to_add) = colnames(data)
to_add$group=rep(levels(data$group), each=empty_bar*nObsType )
library(dplyr)
data=data.frame(
individual=paste( "Mister ", seq(1,60), sep=""),
group=c( rep('A', 10), rep('B', 30), rep('C', 14), rep('D', 6)) ,
value1=sample( seq(10,100), 60, replace=T),
value2=sample( seq(10,100), 60, replace=T),
value3=sample( seq(10,100), 60, replace=T)
)
# Transform data in a tidy format (long format)
data = data %>% gather(key = "observation", value="value", -c(1,2))
library(data.table)
library(stringr)
library(pheatmap)
library(ggplot2)
library(tidyr)
library(ggpubr)
library(tidyverse)
library(viridis)
data=data.frame(
individual=paste( "Mister ", seq(1,60), sep=""),
group=c( rep('A', 10), rep('B', 30), rep('C', 14), rep('D', 6)) ,
value1=sample( seq(10,100), 60, replace=T),
value2=sample( seq(10,100), 60, replace=T),
value3=sample( seq(10,100), 60, replace=T)
)
# Transform data in a tidy format (long format)
data = data %>% gather(key = "observation", value="value", -c(1,2))
# Set a number of 'empty bar' to add at the end of each group
empty_bar=2
nObsType=nlevels(as.factor(data$observation))
to_add = data.frame( matrix(NA, empty_bar*nlevels(data$group)*nObsType, ncol(data)) )
colnames(to_add) = colnames(data)
to_add$group=rep(levels(data$group), each=empty_bar*nObsType )
data=rbind(data, to_add)
data=data %>% arrange(group, individual)
data$id=rep( seq(1, nrow(data)/nObsType) , each=nObsType)
View(data)
# Get the name and the y position of each label
label_data= data %>% group_by(id, individual) %>% summarize(tot=sum(value))
View(label_data)
number_of_bar=nrow(label_data)
(label_data$id-0.5) /number_of_bar
0 - 360 * (label_data$id-0.5) /number_of_bar
90 - 360 * (label_data$id-0.5) /number_of_bar
90 - 360 * (label_data$id-0.5) /number_of_bar
label_data$hjust<-ifelse( angle < -90, 1, 0)
angle= 90 - 360 * (label_data$id-0.5) /number_of_bar     # I substract 0.5 because the letter must have the angle of the center of the bars. Not extreme right(1) or extreme left (0)
label_data$hjust<-ifelse( angle < -90, 1, 0)
label_data$angle<-ifelse(angle < -90, angle+180, angle)
View(label_data)
# prepare a data frame for base lines
base_data=data %>%
group_by(group) %>%
summarize(start=min(id), end=max(id) - empty_bar) %>%
rowwise() %>%
mutate(title=mean(c(start, end)))
View(base_data)
# prepare a data frame for grid (scales)
grid_data = base_data
grid_data$end = grid_data$end[ c( nrow(grid_data), 1:nrow(grid_data)-1)] + 1
grid_data$start = grid_data$start - 1
grid_data=grid_data[-1,]
View(grid_data)
# Make the plot
p = ggplot(data) +
# Add the stacked bar
geom_bar(aes(x=as.factor(id), y=value, fill=observation), stat="identity", alpha=0.5) +
scale_fill_viridis(discrete=TRUE) +
# Add a val=100/75/50/25 lines. I do it at the beginning to make sur barplots are OVER it.
geom_segment(data=grid_data, aes(x = end, y = 0, xend = start, yend = 0), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 50, xend = start, yend = 50), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 100, xend = start, yend = 100), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 150, xend = start, yend = 150), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 200, xend = start, yend = 200), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
# Add text showing the value of each 100/75/50/25 lines
annotate("text", x = rep(max(data$id),5), y = c(0, 50, 100, 150, 200), label = c("0", "50", "100", "150", "200") , color="grey", size=2 , angle=0, fontface="bold", hjust=1) +
ylim(-150,max(label_data$tot, na.rm=T)) +
theme_minimal() +
theme(
legend.position = "none",
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-1,4), "cm")
) +
coord_polar() +
# Add labels on top of each bar
geom_text(data=label_data, aes(x=id, y=tot+10, label=individual, hjust=hjust), color="black", fontface="bold",alpha=0.6, size=1, angle= label_data$angle, inherit.aes = FALSE ) +
# Add base line information
geom_segment(data=base_data, aes(x = start, y = -5, xend = end, yend = -5), colour = "black", alpha=0.8, size=0.6 , inherit.aes = FALSE )  +
geom_text(data=base_data, aes(x = title, y = -18, label=group), hjust=c(1,1,0,0), colour = "black", alpha=0.8, size=4, fontface="bold", inherit.aes = FALSE)
p
data$observation
empty_bar=2
nObsType=nlevels(as.factor(data$observation))
to_add = data.frame( matrix(NA, empty_bar*nlevels(data$group)*nObsType, ncol(data)) )
colnames(to_add) = colnames(data)
to_add$group=rep(levels(data$group), each=empty_bar*nObsType )
View(to_add)
# Make the plot
p = ggplot(data) +
# Add the stacked bar
geom_bar(aes(x=as.factor(id), y=value, fill=observation), stat="identity", alpha=0.5) +
scale_fill_viridis(discrete=TRUE) +
# Add a val=100/75/50/25 lines. I do it at the beginning to make sur barplots are OVER it.
geom_segment(data=grid_data, aes(x = end, y = 0, xend = start, yend = 0), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 50, xend = start, yend = 50), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 100, xend = start, yend = 100), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 150, xend = start, yend = 150), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 200, xend = start, yend = 200), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
# Add text showing the value of each 100/75/50/25 lines
annotate("text", x = rep(max(data$id),5), y = c(0, 50, 100, 150, 200), label = c("0", "50", "100", "150", "200") , color="grey", size=2 , angle=0, fontface="bold", hjust=1) +
ylim(-150,max(label_data$tot, na.rm=T)) +
theme_minimal() +
theme(
legend.position = "none",
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-1,4), "cm")
) +
coord_polar() +
# Add labels on top of each bar
geom_text(data=label_data, aes(x=id, y=tot+10, label=individual, hjust=hjust), color="black", fontface="bold",alpha=0.6, size=1, angle= label_data$angle, inherit.aes = FALSE ) +
# Add base line information
geom_segment(data=base_data, aes(x = start, y = -5, xend = end, yend = -5), colour = "black", alpha=0.8, size=0.6 , inherit.aes = FALSE )  +
geom_text(data=base_data, aes(x = title, y = -1, label=group), hjust=c(1,1,0,0), colour = "black", alpha=0.8, size=4, fontface="bold", inherit.aes = FALSE)
p
# Make the plot
p = ggplot(data) +
# Add the stacked bar
geom_bar(aes(x=as.factor(id), y=value, fill=observation), stat="identity", alpha=0.5) +
scale_fill_viridis(discrete=TRUE) +
# Add a val=100/75/50/25 lines. I do it at the beginning to make sur barplots are OVER it.
geom_segment(data=grid_data, aes(x = end, y = 0, xend = start, yend = 0), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 50, xend = start, yend = 50), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 100, xend = start, yend = 100), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 150, xend = start, yend = 150), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 200, xend = start, yend = 200), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
# Add text showing the value of each 100/75/50/25 lines
annotate("text", x = rep(max(data$id),5), y = c(0, 50, 100, 150, 200), label = c("0", "50", "100", "150", "200") , color="grey", size=2 , angle=0, fontface="bold", hjust=1) +
ylim(-150,max(label_data$tot, na.rm=T)) +
theme_minimal() +
theme(
legend.position = "none",
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-1,4), "cm")
) +
coord_polar() +
# Add labels on top of each bar
geom_text(data=label_data, aes(x=id, y=tot+10, label=individual, hjust=hjust), color="black", fontface="bold",alpha=0.6, size=1, angle= label_data$angle, inherit.aes = FALSE ) +
# Add base line information
geom_segment(data=base_data, aes(x = start, y = -5, xend = end, yend = -5), colour = "black", alpha=0.8, size=0.6 , inherit.aes = FALSE )  +
geom_text(data=base_data, aes(x = title, y = -1, label=group), hjust=c(1,1,1,0), colour = "black", alpha=0.8, size=4, fontface="bold", inherit.aes = FALSE)
p
setwd("~/Desktop/rna/")
library(readxl)
load.file=read_excel("gina-rna-dna.xlsx")
cor(load.file$sor_phi,load.file$sdi_max)
ggplot(load.file, aes(x = diag_type, y = sor_phi))+
geom_point(aes(color =diag_type))+labs(y="Unit heterogeneity(eta) on DNA",x="Unit heterogneity on RNA (distance)")+
ggpubr::color_palette("jco")+geom_smooth(method='lm',se=F)
ggplot(load.file, aes(x = diag_type, y = cdi_max))+
geom_point(aes(color =diag_type))+labs(y="Unit heterogeneity(eta) on DNA",x="Unit heterogneity on RNA (distance)")+
ggpubr::color_palette("jco")
t.test(load.file$cdi_max~load.file$focality)
#try different subtype only
t.test(load.file$cdi_max[!load.file$diag_type %in% c("ER-PR-HER2+","ER-PR-HER2-")]~load.file$focality[!load.file$diag_type %in% c("ER-PR-HER2+","ER-PR-HER2-")])
cor(load.file$sor_eta[!load.file$diag_type %in% c("ER-PR-HER2+","ER-PR-HER2-")],
load.file$grade[!load.file$diag_type %in% c("ER-PR-HER2+","ER-PR-HER2-")])
ihc_clinical=read_excel("ihc_df.xls")
ihc_clinical$ihc_er=ihc_clinical$er_pos
ihc_clinical$ihc_pr=ihc_clinical$pr_pos
ihc_clinical$ihc_her2=ihc_clinical$her2_pos
ihc_clinical[ihc_clinical=="NA"] <- ""
#change anno
ihc_clinical$ihc_er[as.numeric(ihc_clinical$ihc_er)>=10]="Pos"
ihc_clinical$ihc_er[as.numeric(ihc_clinical$ihc_er)<10]="Neg"
ihc_clinical$ihc_pr[as.numeric(ihc_clinical$ihc_pr)>=10]="Pos"
ihc_clinical$ihc_pr[as.numeric(ihc_clinical$ihc_pr)<10]="Neg"
ihc_clinical$ihc_her2[as.numeric(ihc_clinical$ihc_her2)>=10 & as.numeric(ihc_clinical$ihc_her2)<30]="Eq"
ihc_clinical$ihc_her2[as.numeric(ihc_clinical$ihc_her2)>=30]="Pos"
ihc_clinical$ihc_her2[as.numeric(ihc_clinical$ihc_her2)<10]="Neg"
write.csv(ihc_clinical,file="ihc_df.csv")
ihc_short=ihc_clinical[,-c(2:7)]
by_p=split(ihc_short,ihc_short$patient)
View(by_p[[5]])
rna=read_xlsx("rna.xlsx",sheet=2)
rna=rna[,-c(2,3,4)]
colnames(rna)=word(colnames(rna),2,sep = "_")
colnames(rna)[1]="sample"
genes=c("ESR1","PGR","ERBB2")
rna_target=rna[,c("sample",genes)]
library(tidyr)
colnames(rna)=word(colnames(rna),2,sep = "_")
library(stringr)
rna=read_xlsx("rna.xlsx",sheet=2)
rna=rna[,-c(2,3,4)]
colnames(rna)=word(colnames(rna),2,sep = "_")
colnames(rna)[1]="sample"
genes=c("ESR1","PGR","ERBB2")
rna_target=rna[,c("sample",genes)]
View(rna_target)
setwd("~/Desktop/rna/")
library(readxl)
load.file=read_excel("gina-rna-dna.xlsx")
cor(load.file$sor_phi,load.file$sdi_max)
ggplot(load.file, aes(x = diag_type, y = sor_phi))+
geom_point(aes(color =diag_type))+labs(y="Unit heterogeneity(eta) on DNA",x="Unit heterogneity on RNA (distance)")+
ggpubr::color_palette("jco")+geom_smooth(method='lm',se=F)
ihc_clinical[ihc_clinical=="NA"] <- ""
#change anno
ihc_clinical$ihc_er[as.numeric(ihc_clinical$ihc_er)>=10]="Pos"
ihc_clinical$ihc_er[as.numeric(ihc_clinical$ihc_er)<10]="Neg"
ihc_clinical$ihc_pr[as.numeric(ihc_clinical$ihc_pr)>=10]="Pos"
ihc_clinical$ihc_pr[as.numeric(ihc_clinical$ihc_pr)<10]="Neg"
ihc_clinical$ihc_her2[as.numeric(ihc_clinical$ihc_her2)>=10 & as.numeric(ihc_clinical$ihc_her2)<30]="Eq"
ihc_clinical$ihc_her2[as.numeric(ihc_clinical$ihc_her2)>=30]="Pos"
ihc_clinical$ihc_her2[as.numeric(ihc_clinical$ihc_her2)<10]="Neg"
ihc_short=ihc_clinical[,-c(2:7)]
by_p=split(ihc_short,ihc_short$patient)
View(by_p[[5]])
complete_correct=c()
partial_correct=c()
complete_incorrect=c()
invalid_w_na=c()
for(i in 1:length(by_p)){
tmp=by_p[[i]]
patient_all=paste(as.character(tmp[1,12:14]),collapse = "|")
tmp$p_all=patient_all
tmp$foci=apply(t(tmp[,15:17]),2,paste,collapse = "|")
#characters are ihc, names are clinical diagnose
tmp_compare=tmp$foci
names(tmp_compare)=tmp$p_all
# if(length(unique(tmp$foci))>1){
#   het_tmp="Heterogeneous"
# }else{
#   het_tmp="Homogeneous"
# }
#if("TRUE" %in% grepl("^\\||\\|$",tmp$foci))
if(i==1){
comparison_ihc=tmp_compare
if(length(unique(tmp$foci))==1 && unique(tmp$p_all)==unique(tmp$foci)){
complete_correct <- c(complete_correct,unique(tmp$patient))
}else if(unique(tmp$p_all) %in% tmp$foci){
partial_correct<- c(partial_correct,unique(tmp$patient))
}else{
complete_incorrect<- c(complete_incorrect,unique(tmp$patient))
}
#het_lab=het_tmp
next
}
if(length(unique(tmp$foci))==1 && unique(tmp$p_all)==unique(tmp$foci)){
complete_correct <- c(complete_correct,unique(tmp$patient))
}else if(unique(tmp$p_all) %in% tmp$foci){
partial_correct<- c(partial_correct,unique(tmp$patient))
}else{
complete_incorrect<- c(complete_incorrect,unique(tmp$patient))
}
comparison_ihc=c(comparison_ihc,tmp_compare)
#het_lab=c(het_lab,het_tmp)
}
length(comparison_ihc)
lab_ihc=unname(comparison_ihc)
clinical_ihc=names(comparison_ihc)
ihc_compare=data.frame(patient=sort(ihc_short$patient),lab=lab_ihc,clinic=clinical_ihc)
ihc_compare=ihc_compare[-grep("NA",ihc_compare$lab),]
ihc_compare=ihc_compare[-grep("NA",ihc_compare$clinic),]
View(ihc_short)
View(ihc_short)
grep("L1B8Inv1",ihc_short)
grep("L1B8Inv1",ihc_short,value=T)
grep("L1B8Inv1",ihc_short,perl=T)
grep("L1B8Inv1",ihc_short,value=T)
ihc_short[,3]
ihc_short[,6]
lapply(ihc_short, grep)
lapply(ihc_short, grep,"ihc")
lapply(ihc_short, grep,"er")
lapply(ihc_short, grep,"L1B8Inv1")
lapply(ihc_short, grep,"Present")
lapply(ihc_short, grep,"Present",value=T)
lapply(ihc_short, grep,"Present",value=T)
warnings()
lapply(ihc_short, grep,"L1B8Inv1")
warnings()
ihc_short$comedo_necrosis[ihc_short$comedo_necrosis="Pressent"]
ihc_short$comedo_necrosis[ihc_short$comedo_necrosis=="Pressent"]
ihc_short$comedo_necrosis[ihc_short$comedo_necrosis=="Present"]
ihc_short$comedo_necrosis=="Present"
ihc_short$comedo_necrosis[ihc_short$comedo_necrosis=="Present"]
setwd("~/Desktop/rna/")
library(readxl)
AO=read_xlsx("AO_GINA_Data_Outcomes_Staging_Intern.xlsx")
View(AO)
mean(AO$`Age at Dx`)
mean(as.numeric(AO$`Age at Dx`))
as.numeric(AO$`Age at Dx`)
mean(as.numeric(AO$`Age at Dx`))
AO2=read_xlsx("updated_AO_GINA_Data_Outcomes_Staging_Intern_20220614.xlsx")
mean(as.numeric(AO2$`Age at Dx`))
table(AO2$Stage)
table(AO2$Stagegrade
)
table(AO2$grade)
table(AO2$Grade)
View(AO2)
table(AO2$Dx)
table(AO2$Laterality)
table(AO2$`Focality (Clinical/ Pathology)`)
AO2=read_xlsx("updated_AO_GINA_Data_Outcomes_Staging_Intern_20220614.xlsx")
View(AO2)
AO2$truncal
na.omit9AO2$truncal
na.omit(AO2$truncal)
na.omit(unfactor(AO2$truncal))
na.omit(as.character((AO2$truncal)))
na.omit((AO2$truncal))
as.character(na.omit((AO2$truncal)))
c(as.character(na.omit((AO2$truncal))))
paste(as.character(na.omit((AO2$truncal))))
paste0(as.character(na.omit((AO2$truncal))))
paste0(as.character(na.omit((AO2$truncal))),collapse"\n")
paste0(as.character(na.omit((AO2$truncal))),collapse="\n")
paste0(as.character(na.omit((AO2$truncal))),collapse=T)
paste0(as.character(na.omit((AO2$truncal))),collapse=T)
as.character(na.omit((AO2$truncal)))
strplit(as.character(na.omit((AO2$truncal))),sep=",")
strsplit(as.character(na.omit((AO2$truncal))),sep=",")
strsplit(as.character(na.omit((AO2$truncal))))
strsplit(as.character(na.omit((AO2$truncal)))split=",")
strsplit(as.character(na.omit((AO2$truncal))),split=",")
unlist(strsplit(as.character(na.omit((AO2$truncal))),split=","))
all_truncal=unlist(strsplit(as.character(na.omit((AO2$truncal))),split=","))
table(all_truncal)
length(all_truncal)
AO2$truncal
AO2=read_xlsx("updated_AO_GINA_Data_Outcomes_Staging_Intern_20220614.xlsx")
#34 patients
all_truncal=unlist(strsplit(as.character(na.omit((AO2$truncal))),split=","))
length(all_truncal)
#34 patients
all_truncal=unlist(strsplit(as.character(na.omit((AO2$truncal))),split=","))
length(all_truncal)
table(all_truncal)
library(jsonlite)
setwd("~/Desktop/pt/pairtree/final_withoutcnv_4/json/")
files <- list.files(pattern = "*.json")
sink("sdi.txt")
sink("cdi.txt")
sink("cdi_sd.txt")
sink("sdi_sd.txt")
sink()
library(jsonlite)
setwd("~/Desktop/pt/pairtree/final_withoutcnv_4/json/")
files <- list.files(pattern = "*.json")
setwd("~/Desktop/pt/pairtree/final_withoutcnv_4/json/")
library(jsonlite)
library(jsonlite)
library(jsonlite)
setwd("~/Desktop/pt/pairtree/final_withoutcnv_4/json/")
